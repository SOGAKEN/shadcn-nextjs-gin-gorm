package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"dbpilot/internal/graphql/generated"
	"dbpilot/internal/models"
	"fmt"
	"time"
)

// ID はインシデントIDを文字列として返します
func (r *incidentResolver) ID(ctx context.Context, obj *models.Incident) (string, error) {
	return fmt.Sprintf("%d", obj.ID), nil
}

// DateTime は日時を文字列として返します
func (r *incidentResolver) Datetime(ctx context.Context, obj *models.Incident) (string, error) {
	return obj.DateTime.Format(time.RFC3339), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *incidentResolver) CreatedAt(ctx context.Context, obj *models.Incident) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *incidentResolver) UpdatedAt(ctx context.Context, obj *models.Incident) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ID is the resolver for the id field.
func (r *incidentRelationResolver) ID(ctx context.Context, obj *models.IncidentRelation) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IncidentID is the resolver for the incidentId field.
func (r *incidentRelationResolver) IncidentID(ctx context.Context, obj *models.IncidentRelation) (string, error) {
	panic(fmt.Errorf("not implemented: IncidentID - incidentId"))
}

// RelatedIncidentID is the resolver for the relatedIncidentId field.
func (r *incidentRelationResolver) RelatedIncidentID(ctx context.Context, obj *models.IncidentRelation) (string, error) {
	panic(fmt.Errorf("not implemented: RelatedIncidentID - relatedIncidentId"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *incidentRelationResolver) CreatedAt(ctx context.Context, obj *models.IncidentRelation) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *incidentRelationResolver) UpdatedAt(ctx context.Context, obj *models.IncidentRelation) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// CreateIncident は新しいインシデントを作成します
func (r *mutationResolver) CreateIncident(ctx context.Context, input models.IncidentInput) (*models.Incident, error) {
	datetime, err := time.Parse(time.RFC3339, input.DateTime)
	if err != nil {
		return nil, fmt.Errorf("invalid datetime format: %v", err)
	}

	incident := &models.Incident{
		DateTime:  datetime,
		Status:    input.Status,
		Judgment:  input.Judgment,
		Content:   input.Content,
		Assignee:  input.Assignee,
		Priority:  input.Priority,
		FromEmail: input.FromEmail,
		ToEmail:   input.ToEmail,
		Subject:   input.Subject,
	}

	if err := r.DB.Create(incident).Error; err != nil {
		return nil, fmt.Errorf("failed to create incident: %v", err)
	}

	// データベースから新しく作成されたインシデントを取得
	createdIncident := &models.Incident{}
	if err := r.DB.First(createdIncident, incident.ID).Error; err != nil {
		return nil, fmt.Errorf("failed to retrieve created incident: %v", err)
	}

	return createdIncident, nil
}

// UpdateIncident is the resolver for the updateIncident field.
func (r *mutationResolver) UpdateIncident(ctx context.Context, id string, input models.IncidentInput) (*models.Incident, error) {
	panic(fmt.Errorf("not implemented: UpdateIncident - updateIncident"))
}

// DeleteIncident is the resolver for the deleteIncident field.
func (r *mutationResolver) DeleteIncident(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteIncident - deleteIncident"))
}

// CreateResponse is the resolver for the createResponse field.
func (r *mutationResolver) CreateResponse(ctx context.Context, input models.ResponseInput) (*models.Response, error) {
	panic(fmt.Errorf("not implemented: CreateResponse - createResponse"))
}

// UpdateResponse is the resolver for the updateResponse field.
func (r *mutationResolver) UpdateResponse(ctx context.Context, id string, input models.ResponseInput) (*models.Response, error) {
	panic(fmt.Errorf("not implemented: UpdateResponse - updateResponse"))
}

// DeleteResponse is the resolver for the deleteResponse field.
func (r *mutationResolver) DeleteResponse(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteResponse - deleteResponse"))
}

// CreateIncidentRelation is the resolver for the createIncidentRelation field.
func (r *mutationResolver) CreateIncidentRelation(ctx context.Context, input models.IncidentRelationInput) (*models.IncidentRelation, error) {
	panic(fmt.Errorf("not implemented: CreateIncidentRelation - createIncidentRelation"))
}

// DeleteIncidentRelation is the resolver for the deleteIncidentRelation field.
func (r *mutationResolver) DeleteIncidentRelation(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteIncidentRelation - deleteIncidentRelation"))
}

// Incidents は全てのインシデントを返します
func (r *queryResolver) Incidents(ctx context.Context) ([]*models.Incident, error) {
	var incidents []*models.Incident
	if err := r.DB.Find(&incidents).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch incidents: %v", err)
	}
	return incidents, nil
}

// Incident は指定されたIDのインシデントを返します
func (r *queryResolver) Incident(ctx context.Context, id string) (*models.Incident, error) {
	var incident models.Incident
	if err := r.DB.First(&incident, id).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch incident: %v", err)
	}
	return &incident, nil
}

// Responses is the resolver for the responses field.
func (r *queryResolver) Responses(ctx context.Context, incidentID string) ([]*models.Response, error) {
	panic(fmt.Errorf("not implemented: Responses - responses"))
}

// Relations is the resolver for the relations field.
func (r *queryResolver) Relations(ctx context.Context, incidentID string) ([]*models.IncidentRelation, error) {
	panic(fmt.Errorf("not implemented: Relations - relations"))
}

// ID is the resolver for the id field.
func (r *responseResolver) ID(ctx context.Context, obj *models.Response) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IncidentID is the resolver for the incidentId field.
func (r *responseResolver) IncidentID(ctx context.Context, obj *models.Response) (string, error) {
	panic(fmt.Errorf("not implemented: IncidentID - incidentId"))
}

// Datetime is the resolver for the datetime field.
func (r *responseResolver) Datetime(ctx context.Context, obj *models.Response) (string, error) {
	panic(fmt.Errorf("not implemented: Datetime - datetime"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *responseResolver) CreatedAt(ctx context.Context, obj *models.Response) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *responseResolver) UpdatedAt(ctx context.Context, obj *models.Response) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// IncidentID is the resolver for the incidentId field.
func (r *incidentRelationInputResolver) IncidentID(ctx context.Context, obj *models.IncidentRelationInput, data string) error {
	panic(fmt.Errorf("not implemented: IncidentID - incidentId"))
}

// RelatedIncidentID is the resolver for the relatedIncidentId field.
func (r *incidentRelationInputResolver) RelatedIncidentID(ctx context.Context, obj *models.IncidentRelationInput, data string) error {
	panic(fmt.Errorf("not implemented: RelatedIncidentID - relatedIncidentId"))
}

// IncidentID is the resolver for the incidentId field.
func (r *responseInputResolver) IncidentID(ctx context.Context, obj *models.ResponseInput, data string) error {
	panic(fmt.Errorf("not implemented: IncidentID - incidentId"))
}

// Incident returns generated.IncidentResolver implementation.
func (r *Resolver) Incident() generated.IncidentResolver { return &incidentResolver{r} }

// IncidentRelation returns generated.IncidentRelationResolver implementation.
func (r *Resolver) IncidentRelation() generated.IncidentRelationResolver {
	return &incidentRelationResolver{r}
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Response returns generated.ResponseResolver implementation.
func (r *Resolver) Response() generated.ResponseResolver { return &responseResolver{r} }

// IncidentRelationInput returns generated.IncidentRelationInputResolver implementation.
func (r *Resolver) IncidentRelationInput() generated.IncidentRelationInputResolver {
	return &incidentRelationInputResolver{r}
}

// ResponseInput returns generated.ResponseInputResolver implementation.
func (r *Resolver) ResponseInput() generated.ResponseInputResolver { return &responseInputResolver{r} }

type incidentResolver struct{ *Resolver }
type incidentRelationResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type responseResolver struct{ *Resolver }
type incidentRelationInputResolver struct{ *Resolver }
type responseInputResolver struct{ *Resolver }
